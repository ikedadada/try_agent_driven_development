1. 
```
# 目的
Github CopilotのAgent Modeを使ってみる。

# タスク
maven+Jettyを使って最小構成のWebAPIを構築し、Hello WorldなAPIを作成する

# 制限
- 可能な限りファイルへの直接入力は行わない
（mavenプロジェクトの作成は直接入力ではなくmvnコマンドによる作成を推奨する）
- 各試行の記録をREADME.mdに記載し、どのようにGithub CopilotがこのAPIを作成したかわかるようにする。
```

2.
```
# 前提
前回までの実行の内容はprompt.txtを確認すること

# 目的
jarファイルによるビルド物の作成と実行を行えるようにする
また、実行時に必要な依存関係もjarファイル内に含められるようにすること

# 制限
実行ごとに必要があればREADME.mdを修正する
```

3.
```
# 前提
前回までの実行の内容はprompt.txtを確認すること

# 目的
- Content-Type: application/jsonでの通信がおこなえるようになること
  - {"message": "Hello World"} を返却すること
  - JSONは文字列で扱わず、Objectをjson文字列に変換すること

queryParams: nameを受け取って、nameが指定されていたら"Hello :name:"としてnameの値を返却できるようにすること

# 制限
実行ごとに必要があればREADME.mdを修正する
```

4.
```
# 前提
前回までの実行の内容はprompt.txtを確認すること

# 目的
- 環境ごとのプロパティを実行時引数envによって切り替えられるようにすること
- システムプロパティの読み込みは自分で実装せず、ライブラリで解決すること
- envとしてはlocal,stg,prdを想定すること（default: local）
- 現在の実装上ではListenするportのみを環境ごとに指定できる形とすること
- 他か所からApp.Configとして呼び出せるようにすること

# 制限
実行ごとに必要があればREADME.mdを修正する
```

5. 
```
# 前提
前回までの実行の内容はprompt.txtを確認すること

# 目的
ユーザーを管理するシンプルなCRUD APIを作ってください
- エンティティ: User (id, name, email)
- /users エンドポイントを作成
- メモリ上に保存するだけでOK (データベース不要)
- URI設計はRESTの原則に基づくこと
- IDはUUIDを不版すること（ライブラリが必要であればそのライブラリの最新版をインストールすること）

# 制限
実行ごとに必要があればREADME.mdを修正する
```